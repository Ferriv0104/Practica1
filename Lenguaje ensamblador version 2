;EQUIPO 1 
;INTEGRANTES DEL EQUIPO: 
;CORDOBA MARTINEZ JOSE JULIAN 
;HERNANDEZ LOEZA JOSE MAXIMILIANO 
;LIBREROS PONCE ANGEL JESUS 
;RIVERA VEGA MARIA FERNANDA 

JMP boot ; Hará un salto hasta donde aparece "boot" 

stackTop    EQU 0xFF    ; Define el valor de la parte superior de la pila (Stack Pointer Inicial) 
txtDisplay  EQU 0x2E0    ; Dirección de memoria donde se mostrara el texto

Mensaje:    DB "Este mensaje    desaparecerá!"    ; El mensaje que se mostrará en el display de 16x2 
	      DB 0                ; Indica donde termina la cadena para asi evitar que lea otros datos
boot:
    MOV SP, stackTop    ; Configura el SP en la dirección que definimos en stackTop 
    MOV C, Mensaje        ; Carga en el registro C la direccion de inicio del mensaje a imprimir 
    MOV D, txtDisplay    ; Carga en el registro D la direccion de donde se mostrara el texto 
    CALL print   ; Llama a la subrutina imprimir para mostrar el mensaje en la pantalla 

    CALL delay            ; Llamada a la subrutina de retraso para generar una pausa antes de borrar el mensaje 

    ; Sobreescribe la memoria con espacios en blanco
    MOV C, txtDisplay    ; Carga en el registro C la dirección de la pantalla donde se imprimio el mensaje 
    MOV B, 29            ; Longitud del mensaje para despues borrarlo 
borrar:			 ; Se define una etiqueta para el comienzo del bucle borrado
    MOVB [C], 32         ; Escribe un espacio en blanco ya que el valor 32 representa el carácter espacio en blanco (' ') en ASCII
    INC C		 ; Incrementa el registro C para apuntar a la siguiente posicion de memoria
    DEC B		 ; Disminuye el valor de B en 1
    JNZ borrar		 ; JNZ es una instruccion de salto, en este caso se utilizo para repetir el proceso de borrado hasta que B llegue a 0

    HLT                  ; Detiene la ejecución del programa despues de borrar el mensaje 

print:               
    PUSH A ; Guardara el valor actual del registro A en la pila 
    PUSH B ; Guarda el valor actual del registro B en la pila 
    MOV B, 0 ; B = 0 para detectar el final del mensaje 
.loop:
    MOVB AL, [C] ; Carga en AL el caracter actual del mensaje        
    MOVB [D], AL ; Lo copia en la pantalla      
    INC C ; Pasa al siguiente carácter del mensaje 
    INC D ; Pasa a la siguiente posición en la pantalla 
    CMPB BL, [C] ; Compara el BL con el contenido de la nueva posición de C para verificar que es el final del mensaje      
    JNZ .loop  ; Si no es el final, sigue copiando           

    POP B ; Restaura el valor original de B desde la pila 
    POP A ; Restaura el valor original de A desde la pila
    RET ; Retorna la subrutina 
